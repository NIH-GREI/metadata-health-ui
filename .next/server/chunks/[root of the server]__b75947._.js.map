{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 71, "column": 0}, "map": {"version":3,"sources":["file:///Users/jshin/dev/metadata-health-ui/src/app/api/upload/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport path from 'path';\nimport { writeFile, readFile } from 'fs/promises';\nimport { mkdir } from 'fs/promises';\n\nexport async function POST(req: NextRequest) {\n  const formData = await req.formData();\n  const file = formData.get('file') as File;\n\n  if (!file) {\n    return NextResponse.json({ error: 'No file uploaded' }, { status: 400 });\n  }\n\n  try {\n    // Ensure the upload directory exists\n    const uploadDir = path.join(process.cwd(), 'public', 'uploads');\n    await mkdir(uploadDir, { recursive: true });\n\n    // Save file\n    const filePath = path.join(uploadDir, file.name);\n    const fileBuffer = Buffer.from(await file.arrayBuffer());\n    await writeFile(filePath, fileBuffer);\n\n    // Also save the data to enable API access\n    const jsonData = JSON.parse(fileBuffer.toString());\n    const apiDataPath = path.join(process.cwd(), 'data', 'providers');\n    await mkdir(apiDataPath, { recursive: true });\n    await writeFile(\n      path.join(apiDataPath, `${file.name}`),\n      JSON.stringify(jsonData, null, 2)\n    );\n\n    return NextResponse.json({\n      message: 'File uploaded',\n      filePath: `/uploads/${file.name}`,\n      providerId: file.name\n    });\n  } catch (error) {\n    return NextResponse.json({ error: 'Upload failed' }, { status: 500 });\n  }\n}"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;;AAGO,eAAe,KAAK,GAAgB;IACzC,MAAM,WAAW,MAAM,IAAI,QAAQ;IACnC,MAAM,OAAO,SAAS,GAAG,CAAC;IAE1B,IAAI,CAAC,MAAM;QACT,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAmB,GAAG;YAAE,QAAQ;QAAI;IACxE;IAEA,IAAI;QACF,qCAAqC;QACrC,MAAM,YAAY,iGAAA,CAAA,UAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,UAAU;QACrD,MAAM,CAAA,GAAA,qHAAA,CAAA,QAAK,AAAD,EAAE,WAAW;YAAE,WAAW;QAAK;QAEzC,YAAY;QACZ,MAAM,WAAW,iGAAA,CAAA,UAAI,CAAC,IAAI,CAAC,WAAW,KAAK,IAAI;QAC/C,MAAM,aAAa,OAAO,IAAI,CAAC,MAAM,KAAK,WAAW;QACrD,MAAM,CAAA,GAAA,qHAAA,CAAA,YAAS,AAAD,EAAE,UAAU;QAE1B,0CAA0C;QAC1C,MAAM,WAAW,KAAK,KAAK,CAAC,WAAW,QAAQ;QAC/C,MAAM,cAAc,iGAAA,CAAA,UAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,QAAQ;QACrD,MAAM,CAAA,GAAA,qHAAA,CAAA,QAAK,AAAD,EAAE,aAAa;YAAE,WAAW;QAAK;QAC3C,MAAM,CAAA,GAAA,qHAAA,CAAA,YAAS,AAAD,EACZ,iGAAA,CAAA,UAAI,CAAC,IAAI,CAAC,aAAa,GAAG,KAAK,IAAI,EAAE,GACrC,KAAK,SAAS,CAAC,UAAU,MAAM;QAGjC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,UAAU,CAAC,SAAS,EAAE,KAAK,IAAI,EAAE;YACjC,YAAY,KAAK,IAAI;QACvB;IACF,EAAE,OAAO,OAAO;QACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAgB,GAAG;YAAE,QAAQ;QAAI;IACrE;AACF"}},
    {"offset": {"line": 121, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}